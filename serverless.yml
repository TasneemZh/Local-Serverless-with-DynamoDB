org: tasneemzh
app: serverless-template
service: serverless-template

provider:
# The following should stay as is unless specific customisations are required
  name: aws
  runtime: nodejs12.x
  stage: dev
  stackTags:
    resource_owner: #Use your Bitbucket Name here
    business_unit: RD:Development
    managed_by: sls
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**
functions:
  mochaExample:
    handler: src/mochaFunctions/mochaExample.mochaExample # Has been built through serverless-mocha-plugin by 'sls create function' command
  
  helloWorld:
    events:
      - http:
          path: /
          method: get
    tags:
      infrastructure_tier: Lambda
    iamRoleStatements:
      - Effect: Allow
        Action:
          - resource:action
        Resource: '*'
    handler: src/helloWorld.handler
    
  createTable:
    events:
      - http:
          path: /create
          method: get
    tags:
      infrastructure_tier: Lambda
    iamRoleStatements:
      - Effect: Allow
        Action:
          - resource:action
        Resource: '*'
    handler: src/tableFunctions/createTable.handler

  addToTable:
    events:
      - http:
          path: /addFile
          method: get
    tags:
      infrastructure_tier: Lambda
    iamRoleStatements:
      - Effect: Allow
        Action:
          - resource:action
        Resource: '*'
    handler: src/tableFunctions/addToTable.handler
    
  addUserInput:
    events:
      - http:
          path: /addInput
          method: post
    tags:
      infrastructure_tier: Lambda
    iamRoleStatements:
      - Effect: Allow
        Action:
          - resource:action
        Resource: '*'
    handler: src/tableFunctions/addUserInput.handler

  updateItem:
    events:
      - http:
          path: /update
          method: put
    tags:
      infrastructure_tier: Lambda
    iamRoleStatements:
      - Effect: Allow
        Action:
          - resource:action
        Resource: '*'
    handler: src/tableFunctions/updateItem.handler

  deleteTable:
    events:
      - http:
          path: /delete
          method: delete
    tags:
      infrastructure_tier: Lambda
    iamRoleStatements:
      - Effect: Allow
        Action:
          - resource:action
        Resource: '*'
    handler: src/tableFunctions/deleteTable.handler     
    
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2
plugins:
  - serverless-tag-api-gateway
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters
  - serverless-mocha-plugin
  - serverless-dynamodb-local
  - serverless-offline
custom:
  serverless-mocha-plugin:
    testTemplate: templates/testTemplate.ejs
    functionTemplate: templates/functionTemplate.ejs
  apiGatewayTags:
    resource_owner: #Use Bitbucket username
    business_unit: RD:Development
    managed_by: sls
    infrastructure_tier: APIGateway
  dynamodb:
    stages:
      - dev
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
