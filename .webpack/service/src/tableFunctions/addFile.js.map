{"version":3,"sources":["webpack://serverless_template/external \"aws-sdk\"","webpack://serverless_template/external \"fs\"","webpack://serverless_template/external \"source-map-support/register\"","webpack://serverless_template/webpack/bootstrap","webpack://serverless_template/webpack/runtime/compat get default export","webpack://serverless_template/webpack/runtime/define property getters","webpack://serverless_template/webpack/runtime/hasOwnProperty shorthand","webpack://serverless_template/webpack/runtime/make namespace object","webpack://serverless_template/./src/tableFunctions/addFile.js"],"names":["config","region","accessKeyId","secretAccessKey","endpoint","errorMsg","err","console","error","addToDB","allMovies","docClient","movieTitles","p","Promise","resolve","forEach","movie","params","TableName","Item","year","title","info","put","push","catch","handler","event","msg","codeNum","result","DynamoDB","JSON","parse","readFileSync","statusCode","body","stringify","message","input"],"mappings":";;;;;;;;;;AAAA,oC;;;;;;;;;;ACAA,+B;;;;;;;;;;ACAA,wD;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,gCAAgC,YAAY;WAC5C;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AAEAA,kDAAA,CAAc;AACZC,QAAM,EAAE,WADI;AAEZC,aAAW,EAAE,MAFD;AAGZC,iBAAe,EAAE,MAHL;AAIZC,UAAQ,EAAE;AAJE,CAAd;;AAOA,eAAeC,QAAf,CAAwBC,GAAxB,EAA6B;AAC3BC,SAAO,CAACC,KAAR,CAAe,4BAA2BF,GAAI,EAA9C;AACD;;AAED,eAAeG,OAAf,CAAuBC,SAAvB,EAAkCC,SAAlC,EAA6C;AAC3C,QAAMC,WAAW,GAAG,EAApB;AACA,QAAMC,CAAC,GAAG,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACjCL,aAAS,CAACM,OAAV,CAAmBC,KAAD,IAAW;AAC3B,YAAMC,MAAM,GAAG;AACbC,iBAAS,EAAE,QADE;AAEbC,YAAI,EAAE;AACJC,cAAI,EAAEJ,KAAK,CAACI,IADR;AACc;AAClBC,eAAK,EAAEL,KAAK,CAACK,KAFT;AAEgB;AACpBC,cAAI,EAAEN,KAAK,CAACM,IAHR,CAGc;;AAHd;AAFO,OAAf,CAD2B,CAS3B;;AACAZ,eAAS,CAACa,GAAV,CAAcN,MAAd,EAAuBZ,GAAD,IAAS;AAC7B,YAAIA,GAAJ,EAAS;AACPD,kBAAQ,CAACC,GAAD,CAAR;AACD;AACF,OAJD;AAKAM,iBAAW,CAACa,IAAZ,CAAiBR,KAAK,CAACK,KAAvB;AACD,KAhBD;AAiBAP,WAAO,CAACH,WAAD,CAAP;AACD,GAnBS,EAmBPc,KAnBO,CAmBApB,GAAD,IAAS;AAChBD,YAAQ,CAACC,GAAD,CAAR;AACD,GArBS,CAAV,CAF2C,CAuBvC;;AACJ,SAAOO,CAAP;AACD,C,CAED;;;AACO,MAAMc,OAAO,GAAG,MAAOC,KAAP,IAAiB;AACtC,MAAIjB,SAAJ;AAAe,MAAID,SAAJ;AAAe,MAAImB,GAAJ;AAAS,MACrCC,OADqC;AAC5B,MAAIC,MAAJ;;AAEX,MAAI;AACF;AACApB,aAAS,GAAG,IAAIqB,4DAAJ,EAAZ;AACAtB,aAAS,GAAGuB,IAAI,CAACC,KAAL,CAAWC,gDAAY,CAAC,2BAAD,CAAvB,EAAsD,MAAtD,CAAZ;AACAL,WAAO,GAAG,GAAV;AACAD,OAAG,GAAG,kEAAN;AACAE,UAAM,GAAG,MAAMtB,OAAO,CAACC,SAAD,EAAYC,SAAZ,CAAtB;AACD,GAPD,CAOE,OAAOL,GAAP,EAAY;AACZD,YAAQ,CAACC,GAAD,CAAR;AACAwB,WAAO,GAAG,GAAV;AACAD,OAAG,GAAG,8DAAN;AACAE,UAAM,GAAGH,KAAT;AACD;;AAED,SAAQ;AACNQ,cAAU,EAAEN,OADN;AAENO,QAAI,EAAEJ,IAAI,CAACK,SAAL,CAAe;AACnBC,aAAO,EAAEV,GADU;AAEnBW,WAAK,EAAE,MAAMT;AAFM,KAAf,EAIN,IAJM,EAKN,CALM;AAFA,GAAR;AASD,CA3BM,C","file":"src/tableFunctions/addFile.js","sourcesContent":["module.exports = require(\"aws-sdk\");","module.exports = require(\"fs\");","module.exports = require(\"source-map-support/register\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { config, DynamoDB } from 'aws-sdk';\r\nimport { readFileSync } from 'fs';\r\n\r\nconfig.update({\r\n  region: 'us-east-1',\r\n  accessKeyId: '1234',\r\n  secretAccessKey: '5678',\r\n  endpoint: 'http://localhost:8000',\r\n});\r\n\r\nasync function errorMsg(err) {\r\n  console.error(`Well, errors can happen. ${err}`);\r\n}\r\n\r\nasync function addToDB(allMovies, docClient) {\r\n  const movieTitles = [];\r\n  const p = new Promise((resolve) => {\r\n    allMovies.forEach((movie) => {\r\n      const params = {\r\n        TableName: 'Movies',\r\n        Item: {\r\n          year: movie.year, // Movie year of production\r\n          title: movie.title, // Movie name\r\n          info: movie.info, // An object of any information\r\n        },\r\n      };\r\n      // Add movie parameters to the table including the year, title, and info\r\n      docClient.put(params, (err) => {\r\n        if (err) {\r\n          errorMsg(err);\r\n        }\r\n      });\r\n      movieTitles.push(movie.title);\r\n    });\r\n    resolve(movieTitles);\r\n  }).catch((err) => {\r\n    errorMsg(err);\r\n  }); // Errors in promises tend to get swallowed if they are not catched\r\n  return p;\r\n}\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const handler = async (event) => {\r\n  let docClient; let allMovies; let msg; let\r\n    codeNum; let result;\r\n\r\n  try {\r\n    // Have the propability of not being created yet\r\n    docClient = new DynamoDB.DocumentClient();\r\n    allMovies = JSON.parse(readFileSync('./src/data/moviedata.json'), 'utf8');\r\n    codeNum = 200;\r\n    msg = 'New Movies have been added, and they have the following titles:-';\r\n    result = await addToDB(allMovies, docClient);\r\n  } catch (err) {\r\n    errorMsg(err);\r\n    codeNum = 400;\r\n    msg = 'Movies couldn\\'t be added to the database for some reason...';\r\n    result = event;\r\n  }\r\n\r\n  return ({\r\n    statusCode: codeNum,\r\n    body: JSON.stringify({\r\n      message: msg,\r\n      input: await result,\r\n    },\r\n    null,\r\n    2),\r\n  });\r\n};\r\n"],"sourceRoot":""}