{"version":3,"sources":["webpack://serverless_template/external \"aws-sdk\"","webpack://serverless_template/external \"source-map-support/register\"","webpack://serverless_template/webpack/bootstrap","webpack://serverless_template/webpack/runtime/compat get default export","webpack://serverless_template/webpack/runtime/define property getters","webpack://serverless_template/webpack/runtime/hasOwnProperty shorthand","webpack://serverless_template/webpack/runtime/make namespace object","webpack://serverless_template/./src/tableFunctions/updateItem.js"],"names":["config","region","accessKeyId","secretAccessKey","endpoint","handler","event","dynamodb","DynamoDB","year","title","info","JSON","parse","body","update","TableName","Key","UpdateExpression","ExpressionAttributeValues","ReturnValues","promise","statusCode","stringify","message","input"],"mappings":";;;;;;;;;;AAAA,oC;;;;;;;;;;ACAA,wD;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,gCAAgC,YAAY;WAC5C;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;;;;;;;;ACNA;AAEAA,kDAAA,CAAc;AACZC,QAAM,EAAE,WADI;AAEZC,aAAW,EAAE,MAFD;AAGZC,iBAAe,EAAE,MAHL;AAIZC,UAAQ,EAAE;AAJE,CAAd,E,CAOA;;AACO,MAAMC,OAAO,GAAG,MAAOC,KAAP,IAAiB;AACtC,QAAMC,QAAQ,GAAG,IAAIC,4DAAJ,EAAjB;AAEA,QAAM;AAAEC,QAAF;AAAQC,SAAR;AAAeC;AAAf,MAAwBC,IAAI,CAACC,KAAL,CAAWP,KAAK,CAACQ,IAAjB,CAA9B;AAEA,QAAMP,QAAQ,CAACQ,MAAT,CAAgB;AACpBC,aAAS,EAAE,QADS;AAEpBC,OAAG,EAAE;AACHR,UADG;AAEHC;AAFG,KAFe;AAMpBQ,oBAAgB,EAAE,gBANE;AAOpBC,6BAAyB,EAAE;AACzB,eAASR;AADgB,KAPP;AAUpBS,gBAAY,EAAE;AAVM,GAAhB,EAWHC,OAXG,EAAN;AAaA,SAAO;AACLC,cAAU,EAAE,GADP;AAELR,QAAI,EAAEF,IAAI,CAACW,SAAL,CAAe;AACnBC,aAAO,EAAE,0CADU;AAEnBC,WAAK,EAAEb,IAAI,CAACC,KAAL,CAAWP,KAAK,CAACQ,IAAjB;AAFY,KAAf,EAIN,IAJM,EAKN,CALM;AAFD,GAAP;AASD,CA3BM,C","file":"src/tableFunctions/updateItem.js","sourcesContent":["module.exports = require(\"aws-sdk\");","module.exports = require(\"source-map-support/register\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { config, DynamoDB } from 'aws-sdk';\n\nconfig.update({\n  region: 'us-east-1',\n  accessKeyId: '1234',\n  secretAccessKey: '5678',\n  endpoint: 'http://localhost:8000',\n});\n\n// eslint-disable-next-line import/prefer-default-export\nexport const handler = async (event) => {\n  const dynamodb = new DynamoDB.DocumentClient();\n\n  const { year, title, info } = JSON.parse(event.body);\n\n  await dynamodb.update({\n    TableName: 'Movies',\n    Key: {\n      year,\n      title,\n    },\n    UpdateExpression: 'set info=:info',\n    ExpressionAttributeValues: {\n      ':info': info,\n    },\n    ReturnValues: 'UPDATED_NEW',\n  }).promise();\n\n  return {\n    statusCode: 200,\n    body: JSON.stringify({\n      message: 'updateItem function has been executed...',\n      input: JSON.parse(event.body),\n    },\n    null,\n    2),\n  };\n};\n"],"sourceRoot":""}